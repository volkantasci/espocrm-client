name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Get version from package
      id: get-version
      run: |
        VERSION=$(python -c "import espocrm; print(espocrm.__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"

    - name: Check if prerelease
      id: check-prerelease
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease version: $VERSION"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release version: $VERSION"
        fi

    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"

    - name: Check changelog entry
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
          echo "‚ùå No changelog entry found for version $VERSION"
          echo "Please add a changelog entry for this version"
          exit 1
        fi
        echo "‚úÖ Changelog entry found for version $VERSION"

    - name: Run full test suite
      run: |
        pytest --cov=espocrm --cov-fail-under=90

    - name: Validate package metadata
      run: |
        python -m build
        python -m twine check dist/*

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build source distribution
      run: |
        python -m build --sdist

    - name: Build wheel distribution
      run: |
        python -m build --wheel

    - name: Check distributions
      run: |
        python -m twine check dist/*
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-install:
    name: Test Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import espocrm; print(f'‚úÖ Successfully imported espocrm v{espocrm.__version__}')"

    - name: Test CLI functionality
      run: |
        espocrm-cli --version
        espocrm-cli --help

    - name: Test package imports
      run: |
        python -c "
        from espocrm import EspoCRMClient, APIKeyAuth, BasicAuth, HMACAuth
        from espocrm.models import SearchParams, EntityRecord
        from espocrm.exceptions import EspoCRMError
        from espocrm.logging import get_logger
        print('‚úÖ All core imports successful')
        "

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build, test-install]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi'
    environment:
      name: testpypi
      url: https://test.pypi.org/project/espocrm-python-client/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

    - name: Test installation from TestPyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ espocrm-python-client==${{ needs.validate-release.outputs.version }}
        python -c "import espocrm; print(f'‚úÖ Successfully installed from TestPyPI: v{espocrm.__version__}')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build, test-install]
    if: |
      (github.event_name == 'release' && github.event.action == 'published') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
    environment:
      name: pypi
      url: https://pypi.org/project/espocrm-python-client/

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

    - name: Create GitHub Release Assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true

  post-publish:
    name: Post-Publish Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: always() && needs.publish-pypi.result == 'success'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Verify PyPI publication
      run: |
        sleep 120  # Wait for package to be available on PyPI
        pip install espocrm-python-client==${{ needs.validate-release.outputs.version }}
        python -c "import espocrm; print(f'‚úÖ Successfully verified PyPI publication: v{espocrm.__version__}')"

    - name: Update package status
      run: |
        echo "üì¶ Package espocrm-python-client v${{ needs.validate-release.outputs.version }} successfully published to PyPI!"
        echo "üîó https://pypi.org/project/espocrm-python-client/${{ needs.validate-release.outputs.version }}/"

    - name: Trigger documentation update
      if: needs.validate-release.outputs.is-prerelease == 'false'
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: docs-update
        client-payload: '{"version": "${{ needs.validate-release.outputs.version }}"}'

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [validate-release, build, test-install, publish-pypi]
    if: always() && (needs.validate-release.result == 'failure' || needs.build.result == 'failure' || needs.test-install.result == 'failure' || needs.publish-pypi.result == 'failure')

    steps:
    - name: Notify failure
      run: |
        echo "‚ùå Publication failed!"
        echo "Please check the workflow logs for details."
        exit 1