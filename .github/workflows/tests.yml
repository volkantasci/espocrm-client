name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1

jobs:
  test:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 espocrm --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 espocrm --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff espocrm tests

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff espocrm tests

    - name: Type check with mypy
      run: |
        mypy espocrm

    - name: Security check with bandit
      run: |
        bandit -r espocrm -f json -o bandit-report.json || true
        bandit -r espocrm

    - name: Test with pytest
      run: |
        pytest --cov=espocrm --cov-report=xml --cov-report=term-missing --junitxml=pytest.xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest.xml
          coverage.xml
          bandit-report.json
          htmlcov/

  package-test:
    name: Package Installation Test
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: ['3.8', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import espocrm; print(f'Successfully imported espocrm v{espocrm.__version__}')"
        python -c "from espocrm import EspoCRMClient, APIKeyAuth; print('Core imports successful')"

    - name: Test CLI installation
      run: |
        espocrm-cli --version
        espocrm-cli --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ matrix.python-version }}
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
      env:
        # Add any required environment variables for integration tests
        ESPOCRM_TEST_URL: ${{ secrets.ESPOCRM_TEST_URL }}
        ESPOCRM_TEST_API_KEY: ${{ secrets.ESPOCRM_TEST_API_KEY }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run bandit security scan
      run: |
        bandit -r espocrm -f json -o bandit-security-report.json
        bandit -r espocrm

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-security-report.json

  docs-test:
    name: Documentation Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Test documentation build
      run: |
        mkdocs build --strict

    - name: Upload docs artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docs-site
        path: site/

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, package-test, integration-test, security-scan, docs-test]
    if: always()

    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.package-test.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.package-test.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1